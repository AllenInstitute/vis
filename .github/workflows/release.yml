name: Release Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: choice
        options:
          - core
          - dzi
          - geometry
          - omezarr
          - web-components

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.14.2

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Set the remote URL to use the token for pushing
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Get current version and determine next version
        id: version_info
        run: |
          cd packages/${{ github.event.inputs.package }}
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Use git-cliff to determine the next version
          TAG_PATTERN="@alleninstitute/vis-${{ github.event.inputs.package }}@*"
          NEXT_VERSION=$(npx git-cliff --tag-pattern "$TAG_PATTERN" --bumped-version)
          
          # Extract just the version number (remove the tag prefix)
          NEXT_VERSION=$(echo "$NEXT_VERSION" | sed 's/.*@//')
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "Next version: $NEXT_VERSION"

      - name: Update version number and create initial tag
        run: |
          cd packages/${{ github.event.inputs.package }}
          # npm version creates a commit and a tag for us
          npm version ${{ steps.version_info.outputs.next_version }} --no-git-tag-version=false

      - name: Generate changelog
        run: |
          cd packages/${{ github.event.inputs.package }}
          pnpm run changelog

      - name: Amend commit with changelog
        run: |
          cd packages/${{ github.event.inputs.package }}
          git add changelog.md
          git commit --amend --no-edit

      - name: Delete the tag created by npm version and create new one
        id: create_tag
        run: |
          cd packages/${{ github.event.inputs.package }}
          TAG_NAME="@alleninstitute/vis-${{ github.event.inputs.package }}@${{ steps.version_info.outputs.next_version }}"
          
          # Delete the tag created by npm version (it would be just the version number)
          git tag -d v${{ steps.version_info.outputs.next_version }} || true
          
          # Create a new tag with our naming convention on the amended commit
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create release branch and push changes
        run: |
          BRANCH_NAME="release/${{ github.event.inputs.package }}-v${{ steps.version_info.outputs.next_version }}"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ github.event.inputs.package }} v${{ steps.version_info.outputs.next_version }}`,
              head: `release/${{ github.event.inputs.package }}-v${{ steps.version_info.outputs.next_version }}`,
              base: 'main',
              body: `Automated release for @alleninstitute/vis-${{ github.event.inputs.package }} v${{ steps.version_info.outputs.next_version }}\n\nSee [CHANGELOG](./packages/${{ github.event.inputs.package }}/changelog.md) for details.`
            });
            
            // Auto-merge if you have that enabled
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
              merge_method: 'squash'
            });

      - name: Push tag after merge
        run: |
          # Wait a moment for the merge to complete
          sleep 5
          git checkout main
          git pull origin main
          git push origin ${{ steps.create_tag.outputs.tag_name }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          release_name: "${{ github.event.inputs.package }} v${{ steps.version_info.outputs.next_version }}"
          body: |
            Release of @alleninstitute/vis-${{ github.event.inputs.package }} v${{ steps.version_info.outputs.next_version }}
            
            See [CHANGELOG](./packages/${{ github.event.inputs.package }}/changelog.md) for details.
          draft: false
          prerelease: false

      - name: Publish to GitHub Packages (if needed)
        run: |
          cd packages/${{ github.event.inputs.package }}
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@alleninstitute:registry=https://npm.pkg.github.com" >> .npmrc
          
          # Build the package first
          pnpm run build
          
          # Publish to GitHub Packages
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
